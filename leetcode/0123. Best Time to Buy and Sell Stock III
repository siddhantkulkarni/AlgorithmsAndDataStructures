/*
123. Best Time to Buy and Sell Stock III
You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
Example 4:

Input: prices = [1]
Output: 0
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105
*/
class Solution {
    public int maxProfit(int[] prices) {
        int[] maxFromRight = new int[prices.length];
        int[] minFromRight = new int[prices.length];
        maxFromRight[prices.length - 1] = prices[prices.length - 1];
        minFromRight[prices.length - 1] = prices[prices.length - 1];
        
        for(int x = prices.length - 2; x >= 0; x--){
            maxFromRight[x] = Math.max(maxFromRight[x+1], prices[x]);
            minFromRight[x] = Math.min(minFromRight[x+1], prices[x]);
        }
        
        int[] minFromLeft = new int[prices.length];
        minFromLeft[0] = prices[0];
        for(int x = 1; x < prices.length; x++){
            minFromLeft[x] = Math.min(minFromLeft[x-1], prices[x]);
        }
        
        int[] rightProfit = new int[prices.length];
        int[] leftProfit = new int[prices.length];
        for(int x = 0; x < prices.length; x++){
            leftProfit[x] = prices[x] - minFromLeft[x];
            rightProfit[x] = maxFromRight[x] - prices[x];
        }
        
        int[] maxProfitFromRight = new int[prices.length];
        maxProfitFromRight[prices.length - 1] = rightProfit[prices.length - 1];
        for(int x = prices.length - 2; x >= 0; x--){
            maxProfitFromRight[x] = Math.max(maxProfitFromRight[x+1], rightProfit[x]);
        }
        
        int maxProfit = 0;
        for(int x = 0; x < prices.length; x++){
            int profit = leftProfit[x];
            if(x < prices.length - 1){
                profit += maxProfitFromRight[x+1];
            }
            maxProfit = Math.max(maxProfit, profit);
        }
        return maxProfit;
    }
}
