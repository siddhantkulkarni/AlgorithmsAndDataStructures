/*
120. Triangle

Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.
*/
class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int[][] memo = new int[triangle.size()][triangle.get(triangle.size()-1).size()];
        return findMinPath(triangle, 0, 0, memo);
    }
    
    int findMinPath(List<List<Integer>> triangle, int row, int ind, int[][] memo){        
        if(ind < 0 || row >= triangle.size() || ind>= triangle.get(row).size()) return Integer.MAX_VALUE;
        if(memo[row][ind] != 0) return memo[row][ind];
        if(row== triangle.size()-1){
            List<Integer> last = triangle.get(row);
            if(ind >= last.size()) return Integer.MAX_VALUE;
            return last.get(ind);
        }
        List<Integer> next = triangle.get(row+1);
        memo[row][ind]= triangle.get(row).get(ind) + 
                                    Math.min(findMinPath(triangle, row+1, ind, memo), 
                                                findMinPath(triangle, row+1, ind+1, memo));
        return memo[row][ind];
    }
}