/*
2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
/*
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode head = null, tail = null;
        while(l1 != null || l2 != null){
            int nextDigit = carry;
                if(l1 != null)
                    nextDigit +=l1.val;
                if(l2 != null)
                    nextDigit += l2.val;
                carry = nextDigit / 10;
                
            if(head == null){
                head = new ListNode(nextDigit % 10);
                tail = head;
            }else{
                tail.next = new ListNode(nextDigit % 10);
                tail = tail.next;
            }
            if(l1 != null)
                l1 = l1.next;
            if(l2 != null)
                l2 = l2.next;
        }
        if(carry != 0)
            tail.next = new ListNode(carry);
        return head;
    }
}