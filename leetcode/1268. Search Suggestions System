/*
1268. Search Suggestions System

Given an array of strings products and a string searchWord. We want to design a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return list of lists of the suggested products after each character of searchWord is typed. 

 

Example 1:

Input: products = ["mobile","mouse","moneypot","monitor","mousepad"], searchWord = "mouse"
Output: [
["mobile","moneypot","monitor"],
["mobile","moneypot","monitor"],
["mouse","mousepad"],
["mouse","mousepad"],
["mouse","mousepad"]
]
Explanation: products sorted lexicographically = ["mobile","moneypot","monitor","mouse","mousepad"]
After typing m and mo all products match and we show user ["mobile","moneypot","monitor"]
After typing mou, mous and mouse the system suggests ["mouse","mousepad"]
Example 2:

Input: products = ["havana"], searchWord = "havana"
Output: [["havana"],["havana"],["havana"],["havana"],["havana"],["havana"]]
Example 3:

Input: products = ["bags","baggage","banner","box","cloths"], searchWord = "bags"
Output: [["baggage","bags","banner"],["baggage","bags","banner"],["baggage","bags"],["bags"]]
Example 4:

Input: products = ["havana"], searchWord = "tatiana"
Output: [[],[],[],[],[],[],[]]
 

Constraints:

1 <= products.length <= 1000
There are no repeated elements in products.
1 <= Î£ products[i].length <= 2 * 10^4
All characters of products[i] are lower-case English letters.
1 <= searchWord.length <= 1000
All characters of searchWord are lower-case English letters.
*/
class TrieNode{
    char ch;
    TreeMap<Character, TrieNode> children;
    boolean isEndOfWord;
    
    public TrieNode(char ch){
        this.ch = ch;
        children = new TreeMap<>();
        isEndOfWord = false;
    }
}
class Solution {
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        
        TrieNode root = new TrieNode('#');
        for(String product: products){
            addToTrie(root, product);
        }
        List<List<String>> result = new ArrayList<>();
        for(int x = 0; x < searchWord.length(); x++){
            result.add(getWordsStartingWith(searchWord.substring(0, x+1), root));
        }
        return result;
    }
    
    private void addToTrie(TrieNode root, String word){
        if(root == null) return;
        TrieNode end = root.children.getOrDefault(word.charAt(0), 
                                                new TrieNode(word.charAt(0)));
        if(word.length() == 1){
            end.isEndOfWord = true;
            root.children.put(word.charAt(0), end);
            return;
        }
        root.children.put(word.charAt(0), end);
        addToTrie(end, word.substring(1));
    }
    
    private List<String> getWordsStartingWith(String word, TrieNode root){
        TrieNode temp = root;
        
        List<String> current = new ArrayList<>();
        if(!temp.children.containsKey(word.charAt(0)))
            return current;
        int ptr = 0;
        while(ptr < word.length() && temp.children.containsKey(word.charAt(ptr))){
            temp = temp.children.get(word.charAt(ptr++));
        }
        String prefix = word.substring(0, ptr);
        if(ptr < word.length() && !temp.children.containsKey(word.charAt(ptr)))
            return current;
        getCompleteWords(prefix, current, temp);
        return current;
    }
    
    private void getCompleteWords(String prefix, List<String> current, TrieNode temp){
        if(temp.isEndOfWord){
            if(current.size() >= 3)
                return;
            current.add(prefix);
        }
        for(char ch: temp.children.keySet()){
            if(current.size() >= 3)
                return;
            getCompleteWords(prefix + ch, current, temp.children.get(ch));
        }
    }
    
    
}
