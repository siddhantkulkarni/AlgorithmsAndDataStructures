/*
873. Length of Longest Fibonacci Subsequence

A sequence X_1, X_2, ..., X_n is fibonacci-like if:

n >= 3
X_i + X_{i+1} = X_{i+2} for all i + 2 <= n
Given a strictly increasing array A of positive integers forming a sequence, find the length of the longest fibonacci-like subsequence of A.  If one does not exist, return 0.

(Recall that a subsequence is derived from another sequence A by deleting any number of elements (including none) from A, without changing the order of the remaining elements.  For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].)

 

Example 1:

Input: [1,2,3,4,5,6,7,8]
Output: 5
Explanation:
The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: [1,3,7,11,12,14,18]
Output: 3
Explanation:
The longest subsequence that is fibonacci-like:
[1,11,12], [3,11,14] or [7,11,18].
 

Note:

3 <= A.length <= 1000
1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9
(The time limit has been reduced by 50% for submissions in Java, C, and C++.)
*/
class Solution {
    private int getFib(int[] nums, HashMap<Integer,Integer> index, int a, int b, int count){
        if(!index.containsKey(a+b))
            return count;
        else
            return getFib(nums, index, b, a+b, count+1);
    }
    public int lenLongestFibSubseq(int[] A) {
        int max = Integer.MIN_VALUE;
        for(int a: A){
            max = Math.max(max, a);
        }
        HashMap<Integer,Integer> index = new HashMap<Integer,Integer>();
        for(int x = 0; x < A.length; x++){
            index.put(A[x], x);
        }
        max = Integer.MIN_VALUE;
        for(int x = 0; x < A.length - 2; x++){
            for(int y = x + 1; y < A.length - 1; y++){
                max = Math.max(max, getFib(A, index, A[x], A[y], 0));
            }
        }
        
        return max == 0 ? 0 : max+2;
        
    }
}