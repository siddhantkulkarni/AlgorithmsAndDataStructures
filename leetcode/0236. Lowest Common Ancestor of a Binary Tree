/*
236. Lowest Common Ancestor of a Binary Tree

Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]


 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
 

Note:

All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q)
            return root;
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        if(left != null && right != null)   return root;
        return left == null ? right : left;
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/*
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> firstPath = new ArrayList<TreeNode>();
        ArrayList<TreeNode> secondPath = new ArrayList<TreeNode>();
        getPathToNode(root, p, firstPath);
        getPathToNode(root, q, secondPath);
        
        HashSet<Integer> ancestorsOfSecond = new HashSet<Integer>();
        copyValues(secondPath, ancestorsOfSecond);
        
        for(int x = firstPath.size() - 1; x >= 0; x--){
            if(ancestorsOfSecond.contains(firstPath.get(x).val))
                return firstPath.get(x);
        }
        return null;
    }
    
    private void copyValues(ArrayList<TreeNode> myList, HashSet<Integer> mySet){
        for(TreeNode x: myList)
            mySet.add(x.val);
    }
    
    private boolean getPathToNode(TreeNode root, TreeNode target, ArrayList<TreeNode> path){
        if(root == null)
            return false;
        
        if(root.val == target.val){
            path.add(root);
            return true;
        }
        
        ArrayList<TreeNode> left = new ArrayList<TreeNode>();
        ArrayList<TreeNode> right = new ArrayList<TreeNode>();
        
        boolean isInLeft = getPathToNode(root.left, target, left);
        
        if(isInLeft){
            path.add(root);
            path.addAll(left);
            return true;
        }
        boolean isInRight = getPathToNode(root.right, target, right);
        if(isInRight){
            path.add(root);
            path.addAll(right);
            return true;
        }
        return false;
    }
}
*/
