/*
994. Rotting Oranges

In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.
*/
class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<Integer[]> queue = new LinkedList<Integer[]>();
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        
        addAllRottenOrangesToQueue(grid, queue);
        int numberOfOranges = getNumberOfOranges(grid);
        int rottenOranges = queue.size();
        int minutes = 0;
        
        while(!queue.isEmpty()){
            int prevRotten = rottenOranges;
            int queueSize = queue.size();
            while(queueSize > 0){
                queueSize--;
                Integer[] current = queue.remove();
                int row = current[0], col = current[1];
                int updatedNeighbors = updateNeighbors(row, col, grid, queue, visited);
                rottenOranges += updatedNeighbors;
            }
            if(rottenOranges > prevRotten)
                minutes++;
        }
        
        return rottenOranges == numberOfOranges ? minutes : -1;
    }
    
    private void addAllRottenOrangesToQueue(int[][] grid, Queue<Integer[]> queue){
        for(int x = 0; x < grid.length; x++){
            for(int y = 0; y < grid[x].length; y++){
                if(grid[x][y] == 2){
                    queue.add(new Integer[]{x,y});
                }
            }
        }
    }
    
    private int getNumberOfOranges(int[][] grid){
        int count = 0;
        for(int x = 0; x < grid.length; x++){
            for(int y = 0; y < grid[x].length; y++){
                if(grid[x][y] > 0)
                    count++;
            }
        }
        return count;
    }
    
    private int updateNeighbors(int row, int col, int[][] grid, Queue<Integer[]> queue, boolean[][] visited){
        int count = 0;
        if(isValidNeighbor(row - 1, col, visited, grid)){
            grid[row - 1][col] = 2;
            count++;
            visited[row - 1][col] = true;
            queue.add(new Integer[]{row - 1, col});
        }
        if(isValidNeighbor(row, col - 1, visited, grid)){
            grid[row][col - 1] = 2;
            count++;
            visited[row][col - 1] = true;
            queue.add(new Integer[]{row, col - 1});
        }
        if(isValidNeighbor(row + 1, col, visited, grid)){
            grid[row + 1][col] = 2;
            count++;
            visited[row + 1][col] = true;
            queue.add(new Integer[]{row + 1, col});
        }
        if(isValidNeighbor(row, col + 1, visited, grid)){
            grid[row][col + 1] = 2;
            count++;
            visited[row][col + 1] = true;
            queue.add(new Integer[]{row, col + 1});
        }
        return count;
    }
    
    private boolean isValidNeighbor(int row, int col, boolean[][] visited, int[][] grid){
        if(row < 0 || col < 0 || row >= visited.length || col >= visited[0].length)
            return false;
        if(visited[row][col])
            return false;
        if(grid[row][col] != 1)
            return false;
        return true;
    }
    
}
