/*
36. Valid Sudoku

Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit or '.'.
*/

class Solution {
    public boolean isValidSudoku(char[][] board) {
        ArrayList<HashSet<Character>> rowSets = new ArrayList<HashSet<Character>>();
        ArrayList<HashSet<Character>> colSets = new ArrayList<HashSet<Character>>();
        ArrayList<HashSet<Character>> squares = new ArrayList<HashSet<Character>>();
        
        for(int x = 0; x < 9; x++){
            rowSets.add(new HashSet<Character>());
            colSets.add(new HashSet<Character>());
            squares.add(new HashSet<Character>());
        }
        
        for(int r = 0; r < 9; r++){
            for(int c = 0; c < 9; c++){
                if(board[r][c] == '.')
                    continue;
                
                if(!checkAndUpdate(rowSets, r, board[r][c]))
                    return false;
                
                if(!checkAndUpdate(colSets, c, board[r][c]))
                    return false;
                
                int s = getSquare(r,c);
                if(!checkAndUpdate(squares, s, board[r][c]))
                    return false;
            }
        }
        return true;
    }
    
    private boolean checkAndUpdate(ArrayList<HashSet<Character>> sets, int ind, char ch){
        if(sets.get(ind).contains(ch))
                    return false;
                else{
                    HashSet<Character> temp = sets.get(ind);
                    temp.add(ch);
                    sets.set(ind, temp);
                }
        return true;
    }
    
    
    private int getSquare(int r, int c){
        int h = r / 3;
        int v = c  / 3;
        
        if(h == 0){
            if(v == 0)
                return 0;
            else if(v == 1)
                return 1;
            else
                return 2;
        }else if(h == 1){
            if(v == 0)
                return 3;
            else if(v == 1)
                return 4;
            else
                return 5;
        }else{
            if(v == 0)
                return 6;
            else if(v == 1)
                return 7;
            else
                return 8;
        }
        
    }
}
