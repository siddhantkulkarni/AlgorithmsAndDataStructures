/**1110. Delete Nodes And Return Forest

Given the root of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.

 

Example 1:


Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]
Example 2:

Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]
 

Constraints:

The number of nodes in the given tree is at most 1000.
Each node has a distinct value between 1 and 1000.
to_delete.length <= 1000
to_delete contains distinct values between 1 and 1000.

 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
        List<TreeNode> result = new ArrayList<>();
        HashSet<Integer> delete = new HashSet<>();
        for(int num: to_delete) delete.add(num);
        helper(root, null, delete, result);
        return result;
    }
    
    private void helper(TreeNode current, TreeNode parent, HashSet<Integer> delete, List<TreeNode> result){
        if(current == null) return;
        if(delete.contains(current.val)){
            
            helper(current.left, null, delete, result);
            helper(current.right, null, delete, result);
            if(parent != null && parent.left != null && parent.left.val == current.val)
                parent.left = null;
            if(parent != null && parent.right != null && parent.right.val == current.val)
                parent.right = null;
            
            return;
        }
        if(parent == null) result.add(current);
        helper(current.left, current, delete, result);
        helper(current.right, current, delete, result);
    }
}
