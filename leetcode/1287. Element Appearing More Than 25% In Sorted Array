/*
1287. Element Appearing More Than 25% In Sorted Array

Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.

Return that integer.

 

Example 1:

Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6
 

Constraints:

1 <= arr.length <= 10^4
0 <= arr[i] <= 10^5
*/
class Solution {
    public int findSpecialInteger(int[] arr) {
        HashMap<Integer, Integer> counts = new HashMap<Integer, Integer>();
        for(int x = 0; x < arr.length; x++){
            int countOfCurrent = counts.containsKey(arr[x]) ? counts.get(arr[x]) + 1: 1;
            counts.put(arr[x], countOfCurrent);
        }
        int result = 0;
        for(int key: counts.keySet()){
            if((counts.get(key) * 100)/(double)arr.length > 25.0)
                return key;
        }
        return -1;
    }
}
