/*
535. Encode and Decode TinyURL

Note: This is a companion problem to the System Design problem: Design TinyURL.
TinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.

Design the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.
*/
public class Codec {
    HashMap<String, String> map = new HashMap<String, String>();
    public static final Random rand = new Random();
    public static final int len = 6;
    // Encodes a URL to a shortened URL.
    public String encode(String longUrl) {
        StringBuilder encoded = new StringBuilder("http:/tinyurl.com/");
        for(int x = 0; x < len; x++){
            encoded.append(rand.nextInt(10));
        }
        map.put(encoded.toString(), longUrl);
        return encoded.toString();
    }

    // Decodes a shortened URL to its original URL.
    public String decode(String shortUrl) {
        if(map.containsKey(shortUrl))
            return map.get(shortUrl);
        return null;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.decode(codec.encode(url));
