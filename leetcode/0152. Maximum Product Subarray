/*
152. Maximum Product Subarray

Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
*/
class Solution {
    public int maxProduct(int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int[] max = new int[nums.length]; 
        int[] min = new int[nums.length];
        
        max[0] = nums[0];
        min[0] = nums[0];
        int result = nums[0]; 
        for (int x = 1; x < nums.length; x++) {
            if (nums[x] > 0) {
                max[x] = Math.max(nums[x], max[x - 1] * nums[x]);
                min[x] = Math.min(nums[x], min[x - 1] * nums[x]);
            } else {
                max[x] = Math.max(nums[x], min[x - 1] * nums[x]);
                min[x] = Math.min(nums[x], max[x - 1] * nums[x]);
            }
            
            result = Math.max(result, max[x]);
        }
        
        return result;
    }
}
