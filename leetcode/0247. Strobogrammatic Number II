/*
247. Strobogrammatic Number II

Given an integer n, return all the strobogrammatic numbers that are of length n. You may return the answer in any order.

A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

 

Example 1:

Input: n = 2
Output: ["11","69","88","96"]
Example 2:

Input: n = 1
Output: ["0","1","8"]
 

Constraints:

1 <= n <= 14
*/
class Solution {
    public List<String> findStrobogrammatic(int n) {
        ArrayList<Character> stobList = new ArrayList<>();
        stobList.add('0');
        stobList.add('1');
        stobList.add('9');
        stobList.add('8');
        stobList.add('6');
        HashMap<Character, Character> stobs = new HashMap<>();
        stobs.put('0','0');
        stobs.put('1','1');
        stobs.put('6','9');
        stobs.put('8','8');
        stobs.put('9','6');
        
        List<String> result = new ArrayList<>();
        if(n == 1){
            result.add("0");
            result.add("1");
            result.add("8");
            return result;
        }
        if(n % 2 == 0)
            populateResult("", stobList, stobs, result, n);
        else{
            populateResult("0", stobList, stobs, result, n-1);
            populateResult("1", stobList, stobs, result, n-1);
            populateResult("8", stobList, stobs, result, n-1);
        }
        return result;
    }
    
    private void populateResult(String sofar, ArrayList<Character> stobList, HashMap<Character, Character> stobs, List<String> result, int n){
        if(n == 0){
            result.add(sofar);
            return;
        }
        for(int x = 0; x < stobList.size(); x++){
            if(n == 2 && x ==0) continue;
            populateResult(stobList.get(x) + sofar + stobs.get(stobList.get(x)), stobList, stobs, result, n- 2);
        }
    }
}
