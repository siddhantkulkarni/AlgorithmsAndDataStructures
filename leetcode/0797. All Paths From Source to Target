/*
797. All Paths From Source to Target

Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
Example 3:

Input: graph = [[1],[]]
Output: [[0,1]]
Example 4:

Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]
Example 5:

Input: graph = [[1,3],[2],[3],[]]
Output: [[0,1,2,3],[0,3]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
The input graph is guaranteed to be a DAG.
*/
/*call a function and pass 
                the next node to travel to,
                destination
                the path so far as a list
                
                if current node is destination, add path to result as a copy and return
                if you cant travel to any node from current node
                    return
                for each node you can travel to
                    add the node to current path
                    call the function again
                    remove node from current path
                    
        */
class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList();
        List<Integer> startWith = new ArrayList<Integer>();
        startWith.add(0);
        helper(graph, 0, graph.length - 1, startWith, result);
        
        return result;
    }
    
    private void helper(int[][] graph, int nextNode, int dest, List<Integer> pathSoFar,List<List<Integer>> result){
        if(nextNode == dest){
            result.add(new ArrayList<Integer>(pathSoFar));
            return;
        }
        if(graph[nextNode].length == 0)
            return;
        
        for(int node = 0; node < graph[nextNode].length; node++){
            pathSoFar.add(graph[nextNode][node]);
            helper(graph, graph[nextNode][node], dest, pathSoFar, result);
            pathSoFar.remove(pathSoFar.size() - 1);
        }
    }
}
