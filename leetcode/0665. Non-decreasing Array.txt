/*
665. Non-decreasing Array

Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.

We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).

Example 1:
Input: [4,2,3]
Output: True
Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
Example 2:
Input: [4,2,1]
Output: False
Explanation: You can't get a non-decreasing array by modify at most one element.
Note: The n belongs to [1, 10,000].
*/
class Solution {
    public boolean checkPossibility(int[] nums) {
        if(nums.length <= 2) return true;
        int ind = 0;
        int max = nums[0];
        while(ind < nums.length - 1 && nums[ind] <= nums[ind+1]){
            ind++;
        }
        
        if(ind == nums.length - 1)
            return true;
        
        if(ind == 0){
            if(nums[1] <= nums[2]){
                nums[ind] = nums[1];
            }
            else{
                nums[1] = nums[0];
            }
        }
        else if(ind == nums.length - 2){
            nums[nums.length - 1] = nums[nums.length - 2];
        }else{
           if(nums[ind - 1] > nums[ind + 1])
               nums[ind+1] = nums[ind];
            else
                nums[ind] = nums[ind+1];
        }
        
        while(ind < nums.length - 1 && nums[ind] <= nums[ind+1]){
            ind++;
        }
        
        if(ind == nums.length - 1)
            return true;
        else 
            return false;
        
    }
}