/*
40. Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30

*/
class Solution {
    HashSet<String> added = new HashSet<String>();
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> result = new ArrayList();
        helper(candidates, 0, 0, target, new ArrayList<Integer>(), result);
        return result;
    }
    
    private void helper(int[] candidates, int currentIndex, int sumSoFar, int target, List<Integer> listSoFar, List<List<Integer>> result){
        if(sumSoFar == target){
            if(added.contains(listSoFar.toString()))
                return;
            added.add(listSoFar.toString());
            result.add(new ArrayList<Integer>(listSoFar));
            return;
        }
        
        if(currentIndex >= candidates.length || sumSoFar > target)
            return;
        
        listSoFar.add(candidates[currentIndex]);
        helper(candidates, currentIndex + 1, sumSoFar + candidates[currentIndex], target, listSoFar, result);
        listSoFar.remove(listSoFar.size() - 1);
        helper(candidates, currentIndex + 1, sumSoFar, target, listSoFar, result);
        
        
    }
}
