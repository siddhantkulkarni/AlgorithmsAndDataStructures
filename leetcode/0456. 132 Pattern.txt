/*
456. 132 Pattern

Given a sequence of n integers a1, a2, ..., an, a 132 pattern is a subsequence ai, aj, ak such that i < j < k and ai < ak < aj. Design an algorithm that takes a list of n numbers as input and checks whether there is a 132 pattern in the list.

Note: n will be less than 15,000.

Example 1:
Input: [1, 2, 3, 4]

Output: False

Explanation: There is no 132 pattern in the sequence.
Example 2:
Input: [3, 1, 4, 2]

Output: True

Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:
Input: [-1, 3, 2, 0]

Output: True

Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].
*/
class Counts{
    int smallestMinBefore = Integer.MAX_VALUE;
    int largestMinAfter = Integer.MIN_VALUE;
    int index;
    public Counts(int[] nums, int index){
        for(int x = 0; x < index; x++){
            if(nums[x] < nums[index] && nums[x] < smallestMinBefore)
                smallestMinBefore = nums[x];
        }
        for(int x = index + 1; x < nums.length; x++){
            if(nums[x] < nums[index] && nums[x] > largestMinAfter)
                largestMinAfter = nums[x];
        }
        this.index = index;
    }
    
    public boolean hasPattern(){
        if(smallestMinBefore < largestMinAfter)
            return true;
        return false;
    }
}
class Solution {
    public boolean find132pattern(int[] nums) {
       
        Counts[] counts = new Counts[nums.length];
        for(int x = 0; x < nums.length; x++){
            counts[x] = new Counts(nums, x);
        }
        
        for(int x = 0; x < nums.length; x++){
            if(counts[x].hasPattern())
                return true;
        }
        return false;
    }
}