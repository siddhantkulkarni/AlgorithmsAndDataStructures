/*
281. Zigzag Iterator

Given two 1d vectors, implement an iterator to return their elements alternately.

 

Example:

Input:
v1 = [1,2]
v2 = [3,4,5,6] 
Output: [1,3,2,4,5,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].
 

Follow up:

What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question:
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example:

Input:
[1,2,3]
[4,5,6,7]
[8,9]

Output: [1,4,8,2,5,9,3,6,7].
*/
public class ZigzagIterator {
    int a,b;
    List<Integer> v1, v2;
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        a = 0;
        b = 0;
        this.v1=v1;
        this.v2=v2;
        
    }

    public int next() {
        if(a == v1.size())
            return v2.get(b++);
        if(b == v2.size())
            return v1.get(a++);
        if(a <= b)
            return v1.get(a++);
        return v2.get(b++);
    }

    public boolean hasNext() {
        if(a == v1.size() && b == v2.size())
            return false;
        return true;
    }
}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */
