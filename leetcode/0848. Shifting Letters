/*
848. Shifting Letters

We have a string S of lowercase letters, and an integer array shifts.

Call the shift of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a'). 

For example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.

Now for each shifts[i] = x, we want to shift the first i+1 letters of S, x times.

Return the final string after all such shifts to S are applied.

Example 1:

Input: S = "abc", shifts = [3,5,9]
Output: "rpl"
Explanation: 
We start with "abc".
After shifting the first 1 letters of S by 3, we have "dbc".
After shifting the first 2 letters of S by 5, we have "igc".
After shifting the first 3 letters of S by 9, we have "rpl", the answer.
Note:

1 <= S.length = shifts.length <= 20000
0 <= shifts[i] <= 10 ^ 9

*/class Solution {
    int limit = 26;
    public String shiftingLetters(String S, int[] shifts) {
        String result = "";
        long total = 0;
        long soFar = 0;
        for(int x = 0; x < shifts.length; x++){
            total += shifts[x];
        }
        for(int x = 0; x < shifts.length; x++){
            total = total - soFar;
            result += (shift(S.charAt(x), total));
            soFar = shifts[x];
        }
        return result;
    }
    
    private char shift(char ch, long count){
        count = count % limit;
        if(ch + count <= 122)
            return (char)(ch + count);
        else
            return (char)(97 + (ch + count - 123));
    }
}
