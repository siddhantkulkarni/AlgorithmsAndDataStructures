/*1032. Stream of Characters
Implement the StreamChecker class as follows:

StreamChecker(words): Constructor, init the data structure with the given words.
query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
 

Example:

StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]); // init the dictionary.
streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist
 

Note:

1 <= words.length <= 2000
1 <= words[i].length <= 2000
Words will only consist of lowercase English letters.
Queries will only consist of lowercase English letters.
The number of queries is at most 40000.
*/
class Node{
    char ch;
    HashMap<Character, Node> children;
    boolean isEndOfWord;
    
    public Node(char ch){
        this.ch = ch;
        children = new HashMap<>();
    }
    
    public void addWord(String word){
        if(word.length() == 0) return;
        
        char current = word.charAt(0);
        if(!children.containsKey(current)){
            children.put(current, new Node(current));    
        }
        if(word.length() == 1) children.get(current).isEndOfWord = true;
        children.get(current).addWord(word.substring(1));
    }
}
class StreamChecker {
    Node root;
    String querySoFar;
    ArrayList<Node> prev;
    public StreamChecker(String[] words) {
        root = new Node('#');
        for(String word: words){
            root.addWord(word);
        }
        querySoFar = "";
        prev = new ArrayList<>();
    }
    
    public boolean query(char letter) {
        Node temp = root;
        prev.add(root);
        ArrayList<Node> current = new ArrayList<>();
        boolean flag = false;
        for(Node prevNode: prev){
            if(prevNode.children.containsKey(letter)){
                Node currentNode = prevNode.children.get(letter);
                flag = flag || currentNode.isEndOfWord;
                current.add(currentNode);
            }
        }
        prev = current;
        return flag;
    }
    
   
}

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker obj = new StreamChecker(words);
 * boolean param_1 = obj.query(letter);
 */
