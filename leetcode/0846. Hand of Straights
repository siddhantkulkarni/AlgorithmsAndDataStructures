/*
846. Hand of Straights

Alice has a hand of cards, given as an array of integers.

Now she wants to rearrange the cards into groups so that each group is size W, and consists of W consecutive cards.

Return true if and only if she can.

Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/

 

Example 1:

Input: hand = [1,2,3,6,2,3,4,7,8], W = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]
Example 2:

Input: hand = [1,2,3,4,5], W = 4
Output: false
Explanation: Alice's hand can't be rearranged into groups of 4.

 

Constraints:

1 <= hand.length <= 10000
0 <= hand[i] <= 10^9
1 <= W <= hand.length
*/
class Solution {
    public boolean isNStraightHand(int[] hand, int W) {
        if(hand.length % W != 0) return false;
        TreeMap<Integer, Integer> counts = new TreeMap<>();
        for(int x = 0; x < hand.length; x++)
            counts.put(hand[x], counts.getOrDefault(hand[x], 0) + 1);
        while(counts.size() > 0){
            int first = counts.firstKey();
            int count = counts.get(first);
            
            for(int x = 1; x < W; x++){
                if(!counts.containsKey(first + x))
                    return false;
                int nextCount = counts.get(first + x);
                if(nextCount < count)
                    return false;
                else if(nextCount == count)
                    counts.remove(first + x);
                else
                    counts.put(first + x, nextCount - count);
            }
            counts.remove(first);
        }
        return true;
        
    }
}
