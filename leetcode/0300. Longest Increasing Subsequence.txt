'''
300. Longest Increasing Subsequence

Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
Note:

There may be more than one LIS combination, it is only necessary for you to return the length.
Your algorithm should run in O(n2) complexity.
Follow up: Could you improve it to O(n log n) time complexity?
'''
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        if len(nums)==0:
            return(0)
        listOfLIS = [1] * len(nums)
        for x in range(len(nums)-2, -1, -1):
            for y in range(x+1, len(nums)):
                if nums[y] > nums[x]:
                    listOfLIS[x] = max(listOfLIS[x], listOfLIS[y]+1)   
        return(max(listOfLIS))
            