/*
1161. Maximum Level Sum of a Binary Tree

Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level X such that the sum of all the values of nodes at level X is maximal.

 

Example 1:



Input: [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
 

Note:

The number of nodes in the given tree is between 1 and 10^4.
-10^5 <= node.val <= 10^5
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int maxLevelSum(TreeNode root) {
        HashMap<Integer, Integer> levelSums = new HashMap<Integer, Integer>();
        findSums(root, 1, levelSums);
        int maxSum = Integer.MIN_VALUE;
        int maxLevel = 0;
        for(int key: levelSums.keySet()){
            if(maxSum < levelSums.get(key)){
                maxSum = levelSums.get(key);
                maxLevel = key;
            }
        }
        return maxLevel;
    }
    
    private void findSums(TreeNode root, int level, HashMap<Integer,Integer> levelSums){
        if(root == null) return;
        int currentSum = levelSums.containsKey(level) ? levelSums.get(level) + root.val : root.val;
        levelSums.put(level, currentSum);
        findSums(root.left, level + 1, levelSums);
        findSums(root.right, level + 1, levelSums);
    }
}
