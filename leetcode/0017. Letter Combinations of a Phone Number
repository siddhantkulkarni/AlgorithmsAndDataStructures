/*
17. Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.



Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
*/
class Solution {
    public List<String> letterCombinations(String digits) {
        
        Map<Character, String> mapping = new HashMap<Character, String>();
        mapNumbersToCharacters(mapping);
        List<String> result = new ArrayList<String>();
        if(digits.length() == 0) return result;
        buildStrings(digits, result, "", mapping);
        return result;
    }
    
    
    private void mapNumbersToCharacters(Map<Character, String> mapping){
        mapping.put('1', "");
        mapping.put('2', "abc");
        mapping.put('3', "def");
        mapping.put('4', "ghi");
        mapping.put('5', "jkl");
        mapping.put('6', "mno");
        mapping.put('7', "pqrs");
        mapping.put('8', "tuv");
        mapping.put('9', "wxyz");
    }
    
    private void buildStrings(String digits, List<String> result, String sofar, Map<Character, String> mapping){
        if(digits.length() == 0){
            result.add(sofar);
            return;
        }
        char start = digits.charAt(0);
        String values = mapping.get(start);
        for(char letter: values.toCharArray()){
            buildStrings(digits.substring(1), result, sofar+letter, mapping);
        }
        
    }
}
