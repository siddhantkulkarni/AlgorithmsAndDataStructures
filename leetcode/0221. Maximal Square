/*
221. Maximal Square

Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.

*/
class Solution {
    public int maximalSquare(char[][] matrix) {
        int ROWS = matrix.length;
        if(ROWS == 0) return 0;
        int COLS = matrix[0].length;
        int max = 0;
        for(int r = 0; r < ROWS; r++){
            for(int c = 0; c < COLS; c++){
                if(matrix[r][c] == '1'){
                    if(max == 0) max = 1;
                    max = Math.max(max, findMaxSquare(r, c, 1, matrix, ROWS, COLS));
                }
            }
        }
        return max;
    }
    
    private int findMaxSquare(int r, int c, int dev, char[][] matrix, int ROWS, int COLS){
        if(r + dev >= ROWS || c + dev >= COLS) return 0;
        for(int x = r; x < r + dev + 1; x++){
            if(matrix[x][c + dev] != '1')
                return 0;
        }
        for(int x = c; x < c + dev + 1; x++){
            if(matrix[r + dev][x] != '1')
                return 0;
        }
        
        return Math.max(findMaxSquare(r,c, dev + 1, matrix, ROWS, COLS), (dev+1)*(dev+1));
        
    }
}
