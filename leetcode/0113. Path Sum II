/*
113. Path Sum II

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1
Return:

[
   [5,4,11,2],
   [5,8,4,5]
]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> result = new ArrayList();
        findSum(root, sum, 0, new ArrayList<Integer>(), result);
        return result;
    }
    
    private void findSum(TreeNode current, int target, int sofar, List<Integer> path, List<List<Integer>> result){
        if(current == null) return;
        sofar += current.val;
        path.add(current.val);
        if(current.left == null && current.right == null){
            if(sofar == target){
                result.add(new ArrayList(path));
            }
        }
        
        findSum(current.left, target, sofar, path, result);
        findSum(current.right, target, sofar, path, result);
        path.remove(path.size() - 1);
    }
}
