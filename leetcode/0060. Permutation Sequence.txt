/*
60. Permutation Sequence

The set [1,2,3,...,n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Note:

Given n will be between 1 and 9 inclusive.
Given k will be between 1 and n! inclusive.
Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
*/
class Solution {
    private int fact(int n, int[] memo){
        if(n == 0)
            return 1;
        if(memo[n] != 0)
            return memo[n];
        memo[n] = n * fact(n-1, memo);
        return memo[n];
    }
    public String getPermutation(int n, int k) {
        int permutationsLeft = k;
        int[] memo = new int[n+1];
        String result = "";
        ArrayList<Integer> numbers = new ArrayList<Integer>();
        for(int x = 0; x < n; x++){
            numbers.add(x+1);
        }
        
        for(int x = 0; x < n; x++){
            int remainingPerms = fact(n-x-1, memo);
            int nextNum = 0;
            while(k > remainingPerms){
                k = k - remainingPerms;
                nextNum++;
            }
            result += numbers.get(nextNum);
            numbers.remove(nextNum);
        }
        return result;
    }
}