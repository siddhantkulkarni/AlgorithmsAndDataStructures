/*
681. Next Closest Time

Given a time represented in the format "HH:MM", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.

 

Example 1:

Input: time = "19:34"
Output: "19:39"
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.
It is not 19:33, because this occurs 23 hours and 59 minutes later.
Example 2:

Input: time = "23:59"
Output: "22:22"
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.
It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.
 

Constraints:

time.length == 5
time is a valid time in the form "HH:MM".
0 <= HH < 24
0 <= MM < 60

*/
class Solution {
    public String nextClosestTime(String time) {
        int hour = getHour(time);
        int minutes = getMinutes(time);
        HashSet<Character> timeDigits = getSet(time);
        
        for(int h = 0; h < 24; h++){
            String newH = String.format("%02d", (hour + h) % 24);
            for(int m = (h == 0 ? minutes + 1 : 0); m < 60; m++){
                String newM = String.format("%02d", m);
                if(validTime(newH, newM, timeDigits))
                    return newH +":"+ newM;
            }
        }
        return time;
    }
    
    private int getHour(String time){
        return Integer.parseInt(time.split(":")[0]);
    }
    
    private int getMinutes(String time){
        return Integer.parseInt(time.split(":")[1]);
    }
    
    private HashSet<Character> getSet(String time){
        HashSet<Character> result = new HashSet<Character>();
        for(int x = 0; x < time.length(); x++){
            char ch = time.charAt(x);
            if(ch != ':')
                result.add(ch);
        }
        return result;
    }
    
    private boolean validTime(String hh, String mm, HashSet<Character> allowed){
        return allowed.contains(hh.charAt(0)) &&
            allowed.contains(hh.charAt(1)) &&
            allowed.contains(mm.charAt(0)) &&
            allowed.contains(mm.charAt(1));
    }
}
