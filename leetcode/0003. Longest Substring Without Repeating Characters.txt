/*
3. Longest Substring Without Repeating Characters

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> counts = new HashSet<Character>();
        int max = 0;
        for(int x = 0; x < s.length(); x++){
            counts = getMaxSubStringWithUniqueChars(s, x, counts);
            max = Math.max(counts.size(), max);
            counts.remove(s.charAt(x));
        }
        return max;
    }
    private HashSet<Character> getMaxSubStringWithUniqueChars(String s, int start, HashSet<Character> counts){
        for(int x = start + counts.size(); x < s.length(); x++){
            if(counts.contains(s.charAt(x))){
                return counts;
            }else{
                counts.add(s.charAt(x));
            }
        }
        return counts;
    }
}
/*
class Solution {
    public int lengthOfLongestSubstring(String s) {
       
        if(s.length() < 2) return s.length();
        
       HashSet<Character> seen = new HashSet<>();
        int start = 0, end = 1, len = 1, maxLen = 1;
        seen.add(s.charAt(start));
        while(end < s.length()){
            char ch = s.charAt(end);
            if(seen.contains(ch)){
                seen.remove(s.charAt(start));
                start++;
                len--;
            }else{
                seen.add(ch);
                len++;
                end++;
            }
            maxLen = Math.max(len, maxLen);
        }
        return maxLen;
    }
}
*/
