/*
62. Unique Paths

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 7 x 3 grid. How many possible unique paths are there?

Note: m and n will be at most 100.

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right
Example 2:

Input: m = 7, n = 3
Output: 28
*/
class Solution {
    public int uniquePaths(int m, int n) {
        int[][] memo = new int[m][n];
        return paths(m, n, 0, 0, memo);
    }
    
    private int paths(int m, int n, int x, int y, int[][] memo){
        if(x == m-1 && y == n-1)
            return 1;
        
        if(x >= m || y >= n)
            return 0;
        
        if(memo[x][y] != 0)
            return memo[x][y];
        
        memo[x][y] = paths(m, n, x+1, y, memo) + paths(m, n, x, y+1, memo);
      
        return memo[x][y];
    }
    
}
