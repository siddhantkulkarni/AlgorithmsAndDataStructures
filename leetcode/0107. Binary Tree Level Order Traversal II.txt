/*
107. Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int max = Integer.MIN_VALUE;
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();
        traverse(root, 0, map);
        for(int x = max; x >= 0; x--){
            result.add(map.get(x));
        }
        return result;
    }
    
    private void traverse(TreeNode root, int depth, HashMap<Integer, ArrayList<Integer>> map){
        if(root == null)
            return;
        ArrayList<Integer> temp = new ArrayList<Integer>();
        if(map.containsKey(depth))
            temp = map.get(depth);
        temp.add(root.val);
        map.put(depth, temp);
        max = Math.max(max, depth);
        traverse(root.left, depth+1, map);
        traverse(root.right, depth+1, map);
    }
}