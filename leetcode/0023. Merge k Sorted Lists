/*

23. Merge k Sorted Lists

 

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

 

Example:

 

Input:

[

  1->4->5,

  1->3->4,

  2->6

]

Output: 1->1->2->3->4->4->5->6

*/

/**

* Definition for singly-linked list.

* public class ListNode {

*     int val;

*     ListNode next;

*     ListNode(int x) { val = x; }

* }

*/

class Solution {

    int listSize = 0;

    public ListNode mergeKLists(ListNode[] lists) {

        if(lists.length == 0) return null;

        if(lists.length == 1) return lists[0];

        ListNode current = getSmallestNode(lists);

        if(listSize < lists.length)

            current.next = mergeKLists(lists);

        return current;

    }

   

    private ListNode getSmallestNode(ListNode[] lists){

        int min = Integer.MAX_VALUE;

        int ind = -1;

        ListNode result = null;

        for(int x = 0; x < lists.length; x++){

            if(lists[x] != null && lists[x].val < min){

                result = lists[x];

                min = result.val;

                ind = x;

            }

        }

       

        if(ind >= 0){

            lists[ind] = lists[ind].next;

            if(lists[ind] == null)

                listSize++;

        }

       

        if(result == null)

            listSize = lists.length;

        return result;

    }


}
