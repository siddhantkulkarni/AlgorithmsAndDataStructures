/*
1320. Minimum Distance to Type a Word Using Two Fingers


You have a keyboard layout as shown above in the XY plane, where each English uppercase letter is located at some coordinate, for example, the letter A is located at coordinate (0,0), the letter B is located at coordinate (0,1), the letter P is located at coordinate (2,3) and the letter Z is located at coordinate (4,1).

Given the string word, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. 

Note that the initial positions of your two fingers are considered free so don't count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.

 

Example 1:

Input: word = "CAKE"
Output: 3
Explanation: 
Using two fingers, one optimal way to type "CAKE" is: 
Finger 1 on letter 'C' -> cost = 0 
Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 
Finger 2 on letter 'K' -> cost = 0 
Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 
Total distance = 3
Example 2:

Input: word = "HAPPY"
Output: 6
Explanation: 
Using two fingers, one optimal way to type "HAPPY" is:
Finger 1 on letter 'H' -> cost = 0
Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2
Finger 2 on letter 'P' -> cost = 0
Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0
Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4
Total distance = 6
Example 3:

Input: word = "NEW"
Output: 3
Example 4:

Input: word = "YEAR"
Output: 7
 

Constraints:

2 <= word.length <= 300
Each word[i] is an English uppercase letter.
*/

class Solution {
    public final int maxNum = getCharNum('Z');
    public int minimumDistance(String word) {
        int[][][] memo = new int[word.length()][maxNum + 1][maxNum + 1];
        return helper(0, -1, -1, word, memo);
        
    }
    
    private int helper(int currentIndex, int left, int right, String word, int[][][] memo){
        if(currentIndex == word.length())
            return 0;
        // System.out.println(currentIndex + "," + left + "," + right);
        if(left == -1 && right == -1 && memo[currentIndex][maxNum][maxNum] != 0)
            return memo[currentIndex][maxNum][maxNum];
        if(left == -1 && right != -1 && memo[currentIndex][maxNum][right] != 0)
            return memo[currentIndex][maxNum][right];
        if(right == -1 && left != -1 && memo[currentIndex][left][maxNum] != 0)
            return memo[currentIndex][left][maxNum];
        if(left != -1 && right != -1 && memo[currentIndex][left][right] != 0)
            return memo[currentIndex][left][right];
        
        int min = Integer.MAX_VALUE;
        if(left == -1)
            min = Math.min(min, helper(currentIndex + 1, getCharNum(word.charAt(currentIndex)), right, word, memo));
        if(right == -1)
            min = Math.min(min, helper(currentIndex + 1, left, getCharNum(word.charAt(currentIndex)), word, memo));
        int currentNum = getCharNum(word.charAt(currentIndex));
        int ifUsedLeft = getDist(left, currentNum) 
                        + helper(currentIndex + 1, currentNum, right, word, memo);
        int ifUsedRight = getDist(right, currentNum) 
                        + helper(currentIndex + 1, left, currentNum, word, memo);
        
        if(left == -1) left = maxNum;
        if(right == -1) right = maxNum;
        memo[currentIndex][left][right] = Math.min(min, Math.min(ifUsedLeft, ifUsedRight));
        return memo[currentIndex][left][right];
                        
    }
    private int getDist(int x, int y){
        int rx = x / 6;
        int cx = x % 6;
        int ry = y / 6;
        int cy = y % 6;
        return Math.abs(rx - ry)+Math.abs(cx -cy);
    }
    
    private int getCharNum(char ch){
        return ch - 65;
    }
}
