/*/*
348. Design Tic-Tac-Toe
Medium

640

46

Add to List

Share
Design a Tic-tac-toe game that is played between two players on a n x n grid.

You may assume the following rules:

A move is guaranteed to be valid and is placed on an empty block.
Once a winning condition is reached, no more moves is allowed.
A player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.
Example:
Given n = 3, assume that player 1 is "X" and player 2 is "O" in the board.

TicTacToe toe = new TicTacToe(3);

toe.move(0, 0, 1); -> Returns 0 (no one wins)
|X| | |
| | | |    // Player 1 makes a move at (0, 0).
| | | |

toe.move(0, 2, 2); -> Returns 0 (no one wins)
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).
| | | |

toe.move(2, 2, 1); -> Returns 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).
| | |X|

toe.move(1, 1, 2); -> Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).
| | |X|

toe.move(2, 0, 1); -> Returns 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).
|X| |X|

toe.move(1, 0, 2); -> Returns 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).
|X| |X|

toe.move(2, 1, 1); -> Returns 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).
|X|X|X|
Follow up:
Could you do better than O(n2) per move() operation?
*/
class TicTacToe {
    int[][] mat;
    int size;
    int moves;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        size = n;
        mat = new int[n][n];
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        moves++;
        mat[row][col] = player;
        int colCount = 0;
        for(int x = 0; x < size; x++){
            if(mat[row][x] != player)
                break;
            colCount++;
        }      
        if(colCount == size)
            return player;
        
        int rowCount = 0;
        for(int x = 0; x < size; x++){
            if(mat[x][col] != player)
                break;
            rowCount++;
        }      
        if(rowCount == size)
            return player;
        
        int c = 0;
        for(int r = 0; r < size; ){
            if(mat[r][c] != player)
                break;
            c++;r++;
            if(r == size && c == size)
                return player;
        }
        
        c = size - 1;
        for(int r = 0; r < size; ){
            if(mat[r][c] != player)
                break;
            c--;r++;
            if(r == size && c < 0)
                return player;
        }
        
        
        return 0;
        
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */*/
 
 class TicTacToe {
    Map<Integer, Integer> diagA, diagB;
    ArrayList<HashMap<Integer, Integer>> rowCounts, colCounts;
    int N;
    /** Initialize your data structure here. */
    public TicTacToe(int n) {
        rowCounts = new ArrayList<>();
        colCounts = new ArrayList<>();
        for(int x = 0; x < n; x++){
            rowCounts.add(new HashMap<>());
            colCounts.add(new HashMap<>());
        }
        N = n;
        diagA = new HashMap<>();
        diagB = new HashMap<>();
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        HashMap<Integer, Integer> currentRow = rowCounts.get(row);
        HashMap<Integer, Integer> currentCol = colCounts.get(col);
        currentRow.put(player, currentRow.getOrDefault(player, 0) + 1);
        if(currentRow.keySet().size() == 1 &&
           currentRow.get(currentRow.keySet().toArray()[0]) == N)
            return player;
        currentCol.put(player, currentCol.getOrDefault(player, 0) + 1);
        if(currentCol.keySet().size() == 1 &&
           currentCol.get(currentCol.keySet().toArray()[0]) == N)
            return player;
        
        if(row == col){
            diagA.put(player, diagA.getOrDefault(player, 0) + 1);
            if(diagA.keySet().size() == 1 &&
               diagA.get(diagA.keySet().toArray()[0]) == N)
                return player;
        }
        
        if(isOnDiagB(row, col)){
            diagB.put(player, diagB.getOrDefault(player, 0) + 1);
            if(diagB.keySet().size() == 1 &&
               diagB.get(diagB.keySet().toArray()[0]) == N)
                return player;
        }
        return 0;
    }
    
    private boolean isOnDiagB(int row, int col){
        return row == (N - col)-1;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */
