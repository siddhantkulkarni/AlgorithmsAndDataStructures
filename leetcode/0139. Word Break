/*
139. Word Break

Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false
*/
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        HashSet<String> dict = new HashSet<>(wordDict);
        boolean[] memo = new boolean[s.length() + 1];
        boolean[] visited = new boolean[s.length() + 1];
        return processString(s, dict, memo, visited);
    }
    
    private boolean processString(String s, HashSet<String> dict, boolean[] memo, boolean[] visited){
        if(s.length() == 0) return true;
        if(visited[s.length()]) return memo[s.length()];
        boolean fromHere = false;
        for(int x = 1; x <= s.length(); x++){
            if(dict.contains(s.substring(0,x))){
                fromHere = fromHere | processString(s.substring(x), dict, memo, visited);
            }
        }
        visited[s.length()] = true;
        memo[s.length()] = fromHere;
        return fromHere;
    }
}
