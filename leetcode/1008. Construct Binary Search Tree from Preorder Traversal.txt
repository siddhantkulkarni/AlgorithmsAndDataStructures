/*
1008. Construct Binary Search Tree from Preorder Traversal

Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

 

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

 

Note: 

1 <= preorder.length <= 100
The values of preorder are distinct.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        TreeNode root = null;
        for(int x = 0; x < preorder.length; x++){
            root = addNodeToTree(root, preorder[x]);
        }
        return root;
    }
    private TreeNode addNodeToTree(TreeNode root, int val){
        if(root == null) return new TreeNode(val);
        TreeNode temp = root;
        while(temp != null){
            if(temp.val > val){
                if(temp.left == null){
                    temp.left = new TreeNode(val);
                    return root;
                }else{
                    temp = temp.left;
                }
            }
            else{
                if(temp.right == null){
                    temp.right = new TreeNode(val);
                    return root;
                }else{
                    temp = temp.right;
                }
            }
        }
        
        return root;
    }
}