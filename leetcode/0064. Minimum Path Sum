/*
64. Minimum Path Sum

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
*/
class Solution {
    public int minPathSum(int[][] grid) {
        int[][] memo = new int[grid.length][grid[0].length];
        int nrows = grid.length;
        int ncols = grid[0].length;
        
        for(int row = nrows - 1; row >= 0; row--) {
            for(int col = ncols - 1; col >= 0; col--) {
                if (row == (nrows - 1) && col == (ncols - 1)) {
                    memo[row][col] = grid[row][col];
                    continue;
                }
                int dist = Integer.MAX_VALUE;
                int curr = grid[row][col];
                if (row < (nrows - 1)) {
                    dist = Math.min(dist, curr + memo[row + 1][col]);
                }
                if (col < (ncols - 1)) {
                    dist = Math.min(dist, curr + memo[row][col + 1]);
                }
                memo[row][col] = dist;
            }
        }
        return memo[0][0];
    }
}
