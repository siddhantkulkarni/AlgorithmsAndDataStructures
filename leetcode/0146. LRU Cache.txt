/*
146. LRU Cache

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4
*/
class LinkedListNode{
    int key;
    int value;
    LinkedListNode next;
    LinkedListNode prev;
    
    public LinkedListNode(int key, int value){
        this.key = key;
        this.value = value;
        next = null;
        prev = null;
    }
}

class LRUCache {
    HashMap<Integer,LinkedListNode> cache;
    int capacity, occupancy;
    LinkedListNode head;
    LinkedListNode tail;
   
    private void putAndMarkAsRecentlyUsed(LinkedListNode node){
        if(tail == null){
            head = node;
            tail = node;
        }
        else if(head == tail){
            head.next = node;
            node.prev = head;
            tail = node;
        }
        else{
            tail.next = node;
            node.prev = tail;
            tail = node;
        }
    }
    private LinkedListNode removeLeastRecentlyUsed(){
        LinkedListNode node = null;
        if(head == null){
            return null;
        }
        else if(head == tail){
            node = head;
            head = null;
            tail = null;
        }
        else{
            node = head;
            head = head.next;
            head.prev = null;
            node.next = null;
        }
        return node;
    }
    private LinkedListNode markAsRecentlyUsed(LinkedListNode node){
        if(node.next == null && node.prev == null)
            return node;
        if(node.prev == null){
            head = head.next;
            head.prev = null;
            node.next = null;
            putAndMarkAsRecentlyUsed(node);
        }
        else if(node.next != null){
            node.prev.next = node.next;
            node.next.prev = node.prev;
            node.prev = null;
            node.next = null;
            putAndMarkAsRecentlyUsed(node);
        }
        return node;
    }
    
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.occupancy = 0;
        this.head = null;
        this.tail = null;
        this.cache = new HashMap<Integer,LinkedListNode>();
    }
    
    public int get(int key) {
        if(!cache.containsKey(key)){
            return -1;
        }
        LinkedListNode node = cache.get(key);
        markAsRecentlyUsed(node);
        cache.put(key, node);
        
        return node.value;
    }
    
    public void put(int key, int value) {
        LinkedListNode node;
        if(!cache.containsKey(key)){
            node = new LinkedListNode(key,value);
            if(occupancy == capacity){
                LinkedListNode temp = removeLeastRecentlyUsed();
                cache.remove(temp.key);
                occupancy--;
            }
            putAndMarkAsRecentlyUsed(node);
            cache.put(key, node);
            occupancy++;
        }
        else{
            node = cache.get(key);
            node.value = value;
            markAsRecentlyUsed(node);
            cache.put(key, node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */