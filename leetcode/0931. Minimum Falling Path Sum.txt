/*
931. Minimum Falling Path Sum

Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.

 

Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation: 
The possible falling paths are:
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
The falling path with the smallest sum is [1,4,7], so the answer is 12.

 

Note:

1 <= A.length == A[0].length <= 100
-100 <= A[i][j] <= 100
*/
class Solution {
    public int minFallingPathSum(int[][] A) {
        if(A.length == 0)
            return 0;
        if(A.length == 1)
            return A[0][0];
        int[][] minPaths = new int[A.length][A.length];
        int secondLastRow = A.length - 2;
        int lastRow = A.length-1;
        for(int col = 0; col < A.length; col++){
            if(col == 0){
                minPaths[secondLastRow][col] = A[secondLastRow][col]+Math.min(A[lastRow][col], A[lastRow][col+1]);
            }else if(col == A.length - 1){
                minPaths[secondLastRow][col] = A[secondLastRow][col]+Math.min(A[lastRow][col],A[lastRow][col-1]);
            }else{
                minPaths[secondLastRow][col] = A[secondLastRow][col]+Math.min(A[lastRow][col], Math.min(A[lastRow][col+1],A[lastRow][col-1]));
            }
        }
        
        for(int row = secondLastRow - 1; row >= 0; row--){
            for(int col = 0; col < A.length; col++){
                 if(col == 0){
                    minPaths[row][col] = A[row][col]+Math.min(minPaths[row+1][col], minPaths[row+1][col+1]);
                }else if(col == A.length - 1){
                    minPaths[row][col] = A[row][col]+Math.min(minPaths[row+1][col],minPaths[row+1][col-1]);
                }else{
                    minPaths[row][col] = A[row][col]+Math.min(minPaths[row+1][col], Math.min(minPaths[row+1][col+1],minPaths[row+1][col-1]));
                }   
            }
        }
        
        int min = Integer.MAX_VALUE;
        for(int col = 0; col < A.length; col++){
            min = Math.min(minPaths[0][col], min);
        }
        return min;
    }
}