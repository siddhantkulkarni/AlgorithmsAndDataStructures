/*
1182. Shortest Distance to Target Color

You are given an array colors, in which there are three colors: 1, 2 and 3.

You are also given some queries. Each query consists of two integers i and c, return the shortest distance between the given index i and the target color c. If there is no solution return -1.

 

Example 1:

Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).
The nearest 2 from index 2 is at index 2 itself (0 steps away).
The nearest 1 from index 6 is at index 3 (3 steps away).
Example 2:

Input: colors = [1,2], queries = [[0,3]]
Output: [-1]
Explanation: There is no 3 in the array.
 

Constraints:

1 <= colors.length <= 5*10^4
1 <= colors[i] <= 3
1 <= queries.length <= 5*10^4
queries[i].length == 2
0 <= queries[i][0] < colors.length
1 <= queries[i][1] <= 3

*/
class Solution {
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
        HashMap<Integer, TreeSet<Integer>> colorIndices = new HashMap<>();
        for(int x = 0; x < colors.length; x++){
            TreeSet<Integer> indices = colorIndices.getOrDefault(colors[x], new TreeSet<>());
            indices.add(x);
            colorIndices.put(colors[x], indices);
        }
        
        List<Integer> result = new ArrayList<>();
        for(int[] query : queries){
            TreeSet<Integer> indices = colorIndices.getOrDefault(query[1], null);
            if(indices == null)
                result.add(-1);
            else if(colors[query[0]] == query[1])
                result.add(0);
            else{
                Integer lower = indices.lower(query[0]);
                Integer higher = indices.higher(query[0]);
                int dist = Integer.MAX_VALUE;
                if(lower != null)
                    dist = Math.min(dist, query[0] - lower);
                if(higher != null)
                    dist = Math.min(dist, higher - query[0]);
                if(dist == Integer.MAX_VALUE)
                    result.add(-1);
                else
                    result.add(dist);
            }
        }
        return result;
        
    }
}
