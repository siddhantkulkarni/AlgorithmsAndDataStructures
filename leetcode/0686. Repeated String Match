/*
686. Repeated String Match

Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "",  repeated 1 time is "abc" and repeated 2 times is "abcabc".

 

Example 1:

Input: a = "abcd", b = "cdabcdab"
Output: 3
Explanation: We return 3 because by repeating a three times "abcdabcdabcd", b is a substring of it.
Example 2:

Input: a = "a", b = "aa"
Output: 2
Example 3:

Input: a = "a", b = "a"
Output: 1
Example 4:

Input: a = "abc", b = "wxyz"
Output: -1
 

Constraints:

1 <= a.length <= 104
1 <= b.length <= 104
a and b consist of lower-case English letters.
*/
class Solution {
    public int repeatedStringMatch(String a, String b) {
        if(b.length() < 1)
            return 0;
        if(!(a+a).contains(b) && !(b+b).contains(a) )
            return -1;
        ArrayList<Integer> firstLetterIndices = getIndicesOfFirstletter(a, b.charAt(0));
        for(int ind: firstLetterIndices){
            int rep = 1;
            for(int x = 0; x < b.length(); x++){
                int index = (ind + x) % a.length();
                if(a.charAt(index) != b.charAt(x))
                    break;
                
                if(x == b.length() - 1)
                    return rep;
                
                if(index  == a.length() - 1)
                    rep++;
            }
        }
        return -1;
    }
    private ArrayList<Integer> getIndicesOfFirstletter(String a, char ch){
        ArrayList<Integer> indices = new ArrayList<Integer>();
        for(int x = 0; x < a.length(); x++){
            if(a.charAt(x) == ch)
                indices.add(x);
        }
        return indices;
    }
}
