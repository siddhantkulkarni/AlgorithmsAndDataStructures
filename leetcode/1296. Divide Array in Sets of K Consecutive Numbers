/*
1296. Divide Array in Sets of K Consecutive Numbers

Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into sets of k consecutive numbers
Return True if it is possible. Otherwise, return False.

 

Example 1:

Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].
Example 2:

Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].
Example 3:

Input: nums = [3,3,2,2,1,1], k = 3
Output: true
Example 4:

Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.
 

Constraints:

1 <= k <= nums.length <= 105
1 <= nums[i] <= 109
 

Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/
*/
class Solution {
    public boolean isPossibleDivide(int[] nums, int k) {
        if(nums.length % k != 0)
            return false;
        
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        ArrayList<Integer> unique = new ArrayList<Integer>();
        for(int n : nums){
            if(!map.containsKey(n))
                unique.add(n);
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        ArrayList<ArrayList<Integer>> splits = new ArrayList<ArrayList<Integer>>();
        Collections.sort(unique);
        int splitCount = 0;
        for(int n : unique){
            if(!map.containsKey(n))
                continue;
            
            int currentCount = map.get(n);
            map.remove(n);
            for(int x = n + 1; x < n + k; x++){
                if(!map.containsKey(x))
                    return false;
                else{
                    int next = map.get(x);
                    next = next - currentCount;
                    if(next == 0)
                        map.remove(x);
                    else
                        map.put(x, next);
                }
            }
            splitCount += currentCount;
            
        }
        
        return splitCount == nums.length / k;
        
    }
}
