/*234. Palindrome Linked List
Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        int len = getLength(head);
        
        if(len <= 1)
            return true;
        
        Stack<ListNode> stack = new Stack<ListNode>();
        ListNode temp = head;
        for(int x = len; x > len/2; x--){
            stack.push(temp);
            temp = temp.next;
        }
        
        if(len%2 == 1)
            stack.pop();
        
        while(temp != null && !stack.isEmpty()){
            ListNode top = stack.pop();
            if(top.val != temp.val)
                return false;
            temp = temp.next;
        }
        
        if(temp != null || !stack.isEmpty())
            return false;
        
        return true;
        
    }
    
    private int getLength(ListNode head){
        int counter = 0;
        ListNode temp = head;
        while(temp != null){
            counter++;
            temp = temp.next;
        }
        return counter;
            
    }
}
