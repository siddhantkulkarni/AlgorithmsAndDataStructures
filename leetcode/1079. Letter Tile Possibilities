/*
1079. Letter Tile Possibilities

You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

 

Example 1:

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: tiles = "AAABBC"
Output: 188
Example 3:

Input: tiles = "V"
Output: 1
 

Constraints:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.

*/
class Solution {
    public int numTilePossibilities(String tiles) {
        char[] arr = tiles.toCharArray();
        HashSet<String> seen = new HashSet<>();
        boolean[] used = new boolean[arr.length];
        helper(arr, "", used, 0, seen);
        // System.out.println(seen);
        return seen.size();
    }
    
    private void helper(char[] arr, String sofar, boolean[] considered, int consideredCount, HashSet<String> seen){
        if(consideredCount == arr.length && sofar.length() != 0){
            seen.add(sofar);
            return;
        }
        
        for(int x = 0; x < arr.length; x++){
            if(!considered[x]){
                considered[x] = true;
                helper(arr, sofar, considered, consideredCount + 1, seen);
                helper(arr, sofar + arr[x], considered, consideredCount + 1, seen);
                considered[x] = false;
            }
        }
    }
}
