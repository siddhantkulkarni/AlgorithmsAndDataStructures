/*
1090. Largest Values From Labels

We have a set of items: the i-th item has value values[i] and label labels[i].

Then, we choose a subset S of these items, such that:

|S| <= num_wanted
For every label L, the number of items in S with label L is <= use_limit.
Return the largest possible sum of the subset S.

 

Example 1:

Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth item.
Example 2:

Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2
Output: 12
Explanation: The subset chosen is the first, second, and third item.
Example 3:

Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1
Output: 16
Explanation: The subset chosen is the first and fourth item.
Example 4:

Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2
Output: 24
Explanation: The subset chosen is the first, second, and fourth item.

*/
class Item implements Comparable<Item>{
    int value, label;
    public Item(int v, int l){
        this.value = v;
        this.label = l;
    }
    
    public int compareTo(Item another){
        return another.value - this.value;
    }
}
class Solution {
    public int largestValsFromLabels(int[] values, int[] labels, int num_wanted, int use_limit) {
        PriorityQueue<Item> q = new PriorityQueue<>();
        for(int x = 0; x < values.length; x++){
            q.add(new Item(values[x], labels[x]));
        }
        int sum = 0;
        HashMap<Integer, Integer> labelCounts = new HashMap<>();
        while(num_wanted > 0 && !q.isEmpty()){
            Item current = q.poll();
            if(labelCounts.getOrDefault(current.label, 0) < use_limit){
                sum += current.value;
                labelCounts.put(current.label, labelCounts.getOrDefault(current.label, 0)+1);
                num_wanted--;
            }
            
        }
        return sum;
    }
}
