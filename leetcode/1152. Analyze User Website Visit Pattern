/*
1152. Analyze User Website Visit Pattern

We are given some website visits: the user with name username[i] visited the website website[i] at time timestamp[i].

A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  (The websites in a 3-sequence are not necessarily distinct.)

Find the 3-sequence visited by the largest number of users. If there is more than one solution, return the lexicographically smallest such 3-sequence.

 

Example 1:

Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = ["home","about","career","home","cart","maps","home","home","about","career"]
Output: ["home","about","career"]
Explanation: 
The tuples in this example are:
["joe", 1, "home"]
["joe", 2, "about"]
["joe", 3, "career"]
["james", 4, "home"]
["james", 5, "cart"]
["james", 6, "maps"]
["james", 7, "home"]
["mary", 8, "home"]
["mary", 9, "about"]
["mary", 10, "career"]
The 3-sequence ("home", "about", "career") was visited at least once by 2 users.
The 3-sequence ("home", "cart", "maps") was visited at least once by 1 user.
The 3-sequence ("home", "cart", "home") was visited at least once by 1 user.
The 3-sequence ("home", "maps", "home") was visited at least once by 1 user.
The 3-sequence ("cart", "maps", "home") was visited at least once by 1 user.
 

Note:

3 <= N = username.length = timestamp.length = website.length <= 50
1 <= username[i].length <= 10
0 <= timestamp[i] <= 10^9
1 <= website[i].length <= 10
Both username[i] and website[i] contain only lowercase characters.
It is guaranteed that there is at least one user who visited at least 3 websites.
No user visits two websites at the same time.
*/
class SiteTime implements Comparable<SiteTime>{
    int time;
    String site;
    public SiteTime(int time, String site){
        this.time = time;
        this.site = site;
    }
    
    public int compareTo(SiteTime another){
        return this.time - another.time;
    }
}
class Solution {
    public List<String> mostVisitedPattern(String[] username, int[] timestamp, String[] website) {
        HashMap<String, ArrayList<SiteTime>> userVisits = new HashMap<>();
        for(int u = 0; u < username.length; u++){
            ArrayList<SiteTime> current = userVisits.getOrDefault(username[u], new ArrayList<>());
            current.add(new SiteTime(timestamp[u], website[u]));
            userVisits.put(username[u], current);
        }
        String maxSeq = "";
        int maxCount = 0;
        TreeMap<String, Integer> seqCount = new TreeMap<>();
        for(String user: userVisits.keySet()){
            ArrayList<SiteTime> current = userVisits.get(user);
            Collections.sort(current);
            HashSet<String> counted = new HashSet<String>();
            for(int x = 0; x < current.size() - 2; x++){
                for(int y = x + 1; y < current.size() - 1; y++){
                    for(int z = y + 1; z < current.size(); z++){
                        String first = current.get(x).site;
                        String second = current.get(y).site;
                        String third = current.get(z).site;
                        StringBuilder temp = new StringBuilder();
                        temp.append(first);
                        temp.append("-");
                        temp.append(second);
                        temp.append("-");
                        temp.append(third);
                        String seq = temp.toString();
                        if(counted.contains(seq)) continue;
                        int currentCount = seqCount.getOrDefault(seq, 0) + 1;
                        counted.add(seq);
                        seqCount.put(seq, currentCount);
                    }
                }
            }
        }
        
        for(String seq: seqCount.keySet()){
            int currentCount = seqCount.get(seq);
            if(currentCount > maxCount){
                maxCount = currentCount;
                maxSeq = seq;
            }else if(currentCount == maxCount){
                if(maxSeq.compareTo(seq) > 0)
                    maxSeq = seq;
            }
        }
        String[] resultSeqArr = maxSeq.split("-");
        List<String> result = new ArrayList<String>();
        for(String site: resultSeqArr){
            result.add(site);
        }
        return result;
    }
}
